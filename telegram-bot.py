import telebot
from telebot import types
import mysql.connector
import datetime

users = {} # –æ–±—ä—è–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
db = mysql.connector.connect(
    host="host",
    user="user",
    password="password",
    database="database"
)
cursor = db.cursor()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot("token")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    query = ""
    cursor.execute(query)
    members = cursor.fetchall()
    global users # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    for member in members:
        users[member[3]] = member[0]
    chat_id = message.chat.id
    bot.send_message(message.chat.id, '', parse_mode= 'Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mylist
@bot.message_handler(commands=['mylist'])
def mylist(message):
    query = ""
    cursor.execute(query)
    members = cursor.fetchall()
    global users
    for member in members:
        users[member[3]] = member[0]
    chat_id = message.chat.id
    if chat_id in users:
        username = users[chat_id]
        query = f""
        cursor.execute(query)
        products = cursor.fetchall()
        if not products:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        else:
            text = "–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n"
            for product in products:
                text += f"{product[1]} - –¥–æ {product[3]}\n"
            bot.send_message(chat_id, text)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
@bot.message_handler(commands=['add'])
def add(message):
    global username
    chat_id = message.chat.id
    if chat_id in users:
        username = users[chat_id]
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

def get_name(message):
    global name
    name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
    bot.register_next_step_handler(message, get_expiration_date)

def get_expiration_date(message):
    global expiration_date
    global username
    expiration_date = message.text
    try:
        query = f""
        cursor.execute(query)
        db.commit()
        bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete
@bot.message_handler(commands=['delete'])
def delete(message):
    chat_id = message.chat.id
    if chat_id in users:
        username = users[chat_id]
        query = f""
        cursor.execute(query)
        products = cursor.fetchall()
        if not products:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        else:
            markup = types.InlineKeyboardMarkup()
            for product in products:
                button = types.InlineKeyboardButton(text=product[1], callback_data=f"delete_{product[0]}")
                markup.add(button)
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def callback_delete(call):
    chat_id = call.message.chat.id
    if chat_id in users:
        username = users[chat_id]
        product_id = call.data.split("_")[1]
        query = f""
        cursor.execute(query)
        db.commit()
        bot.answer_callback_query(call.id, "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω")
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /myid
@bot.message_handler(commands=['myid'])
def ID(message):
  bot.send_message(message.chat.id,'–í–∞—à ID: `{0.id}`'.format(message.from_user, bot.get_me()), 
                parse_mode= 'Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@bot.message_handler(commands=['schedule'])
def schedule(message):
    chat_id = message.chat.id
    if chat_id in users:
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(msg, process_time_step)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

def process_time_step(message):
    chat_id = message.chat.id
    if chat_id in users:
        time = message.text
        try:
            datetime.datetime.strptime(time, '%H:%M')
            username = users[chat_id]
            query = f""
            cursor.execute(query)
            db.commit()
            bot.send_message(chat_id, "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            bot.register_next_step_handler(msg, process_time_step)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unschedule
@bot.message_handler(commands=['unschedule'])
def unschedule(message):
    chat_id = message.chat.id
    if chat_id in users:
        username = users[chat_id]
        query = f""
        cursor.execute(query)
        db.commit()
        bot.send_message(chat_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info
@bot.message_handler(commands=['info'])
def start_message(message):
  keyboard = types.InlineKeyboardMarkup()  
  keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url=''))
  bot.send_message(message.chat.id, '–°–∞–π—Ç —Å–µ—Ä–≤–∏—Å–∞ üëá', reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
